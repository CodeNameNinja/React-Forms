{"version":3,"sources":["hooks/use-input.js","components/SimpleInput.js","App.js","index.js"],"names":["useInput","validateValue","useState","enteredValue","setEnteredValue","isTouched","setIsTouched","valueIsValid","value","isValid","hasError","valueChangeHandler","event","target","inputBlurHandler","reset","SimpleInput","props","trim","enteredName","enteredNameIsValid","nameInputHasError","nameChangedHandler","nameInputBlurHandler","resetNameInputHandler","includes","enteredEmail","enteredEmailIsValid","emailInputHasError","emailChangedHandler","emailInputBlurHandler","resetEmailInputHandler","formIsValid","nameInputClasses","emailInputClasses","onSubmit","preventDefault","inputClasses","inputChangeHandler","label","invalid","invalidText","className","disabled","Input","htmlFor","replace","type","id","onChange","onBlur","App","onAdd","console","log","ReactDOM","render","document","getElementById"],"mappings":"mLA2BeA,EA1BE,SAACC,GAChB,MAAwCC,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAEMC,EAAeN,EAAcE,GAYnC,MAAO,CACLK,MAAOL,EACTM,QAASF,EACPG,UAdgBH,GAAgBF,EAehCM,mBAdyB,SAACC,GAC1BR,EAAgBQ,EAAMC,OAAOL,QAc7BM,iBAZuB,SAACF,GACxBN,GAAa,IAYfS,MAVa,WACbX,EAAgB,IAChBE,GAAa,M,OCuDAU,EApEK,SAACC,GACnB,MAOIjB,GAAU,SAAAQ,GAAK,MAAqB,KAAjBA,EAAMU,UANpBC,EADT,EACEX,MACSY,EAFX,EAEEX,QACUY,EAHZ,EAGEX,SACoBY,EAJtB,EAIEX,mBACkBY,EALpB,EAKET,iBACOU,EANT,EAMET,MAEF,EAOIf,GAAU,SAAAQ,GAAK,OAAIA,EAAMiB,SAAS,QAN7BC,EADT,EACElB,MACSmB,EAFX,EAEElB,QACUmB,EAHZ,EAGElB,SACoBmB,EAJtB,EAIElB,mBACkBmB,EALpB,EAKEhB,iBACOiB,EANT,EAMEhB,MAKEiB,GAAc,EACdZ,GAAsBO,IACxBK,GAAc,GAGhB,IASMC,EAAmBZ,EACrB,uBACA,eAEEa,EAAoBN,EACtB,uBACA,eACJ,OACE,uBAAMO,SAjBsB,SAACvB,GAC7BA,EAAMwB,iBACDhB,IAGLI,IACAO,MAWA,UACE,cAAC,EAAD,CACEM,aAAcJ,EACdK,mBAAoBhB,EACpBR,iBAAkBS,EAClBf,MAAOW,EACPoB,MAAM,YACNC,QAASnB,EACToB,YAAY,wBAEd,cAAC,EAAD,CACEJ,aAAcH,EACdI,mBAAoBT,EACpBf,iBAAkBgB,EAClBtB,MAAOkB,EACPa,MAAM,aACNC,QAASZ,EACTa,YAAY,iCAEd,qBAAKC,UAAU,eAAf,SACE,wBAAQC,UAAWX,EAAnB,0BAQFY,EAAQ,SAAC3B,GACb,OACE,sBAAKyB,UAAWzB,EAAMoB,aAAtB,UACE,uBAAOQ,QAAS5B,EAAMsB,MAAMO,QAAQ,OAAQ,IAA5C,SAAkD7B,EAAMsB,QACxD,uBACEQ,KAAK,OACLC,GAAI/B,EAAMsB,MAAMO,QAAQ,OAAQ,IAChCG,SAAUhC,EAAMqB,mBAChBY,OAAQjC,EAAMH,iBACdN,MAAOS,EAAMT,QAEdS,EAAMuB,SAAW,mBAAGE,UAAU,aAAb,SAA2BzB,EAAMwB,kBCtE1CU,MAXf,WAIE,OACE,qBAAKT,UAAU,MAAf,SACE,cAAC,EAAD,CAAaU,MALI,SAACxC,GACpByC,QAAQC,IAAI1C,SCChB2C,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U","file":"static/js/main.aad39514.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nconst useInput = (validateValue) => {\r\n  const [enteredValue, setEnteredValue] = useState(\"\");\r\n  const [isTouched, setIsTouched] = useState(false);\r\n\r\n  const valueIsValid = validateValue(enteredValue);\r\n  const hasError = !valueIsValid && isTouched;\r\n  const valueChangeHandler = (event) => {\r\n    setEnteredValue(event.target.value);\r\n  };\r\n  const inputBlurHandler = (event) => {\r\n    setIsTouched(true);\r\n  };\r\n\tconst reset = () => {\r\n\t\tsetEnteredValue(\"\");\r\n\t\tsetIsTouched(false);\r\n\t}\r\n  return {\r\n    value: enteredValue,\r\n\t\tisValid: valueIsValid,\r\n    hasError,\r\n    valueChangeHandler,\r\n    inputBlurHandler,\r\n\t\treset\r\n  };\r\n};\r\n\r\nexport default useInput;\r\n","import { useState, useEffect } from \"react\";\nimport useInput from \"../hooks/use-input\";\nconst SimpleInput = (props) => {\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangedHandler,\n    inputBlurHandler: nameInputBlurHandler,\n    reset: resetNameInputHandler\n  } = useInput( value => value.trim() !== '');\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailChangedHandler,\n    inputBlurHandler: emailInputBlurHandler,\n    reset: resetEmailInputHandler\n  } = useInput( value => value.includes(\"@\"));\n\n  \n\n  let formIsValid = false;\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n    if (!enteredNameIsValid) {\n      return;\n    }\n    resetNameInputHandler();\n    resetEmailInputHandler();\n  };\n\n  const nameInputClasses = nameInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const emailInputClasses = emailInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <Input\n        inputClasses={nameInputClasses}\n        inputChangeHandler={nameChangedHandler}\n        inputBlurHandler={nameInputBlurHandler}\n        value={enteredName}\n        label=\"Your Name\"\n        invalid={nameInputHasError}\n        invalidText=\"Please enter a name\"\n      />\n      <Input\n        inputClasses={emailInputClasses}\n        inputChangeHandler={emailChangedHandler}\n        inputBlurHandler={emailInputBlurHandler}\n        value={enteredEmail}\n        label=\"Your Email\"\n        invalid={emailInputHasError}\n        invalidText=\"Please enter a correct email\"\n      />\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n\nconst Input = (props) => {\n  return (\n    <div className={props.inputClasses}>\n      <label htmlFor={props.label.replace(/\\s+/g, \"\")}>{props.label}</label>\n      <input\n        type=\"text\"\n        id={props.label.replace(/\\s+/g, \"\")}\n        onChange={props.inputChangeHandler}\n        onBlur={props.inputBlurHandler}\n        value={props.value}\n      />\n      {props.invalid && <p className=\"error-text\">{props.invalidText}</p>}\n    </div>\n  );\n};\n","import SimpleInput from './components/SimpleInput';\n\nfunction App() {\n  const onAddHandler = (event) => {\n    console.log(event);\n  }\n  return (\n    <div className=\"app\">\n      <SimpleInput onAdd={onAddHandler} />\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}